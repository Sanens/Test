#include<iostream>
#include<fstream> 
#include<iomanip>
using namespace std;
struct Book{
	string id;
	string name;
	double price;
};

typedef struct{
	Book*elem;
	int length;
}List;

#define MAXSIZE 100
#define OK 1
#define OVERFLOW -2
#define ERROR 0

int InitList(List &L)
{ //初始化
	L.elem=new Book[MAXSIZE];
	if(!L.elem) exit(OVERFLOW);
	L.length=0;
	return OK;
}

int Insert(List &L,int i,Book e)
{//插入 
	if(i<1||i>L.length+1)  return ERROR;//插入位置不合理 ,1<=i<=L.length+1;
	//if(L.length=MAXSIZE)  return ERROR;//表中已满，无法继续插入 
	for(int j=L.length-1;j>=i-1;j--) 
	L.elem[j+1]=L.elem[j];
	L.elem[i-1]=e;
	L.length++;
	return OK;
}

int Delete(List&L,int i)
{//删除 
	if(i<1||i>L.length)  return ERROR;
	//if(L.length==0)    return ERROR;
	for(int j=i;j<=L.length-1;j++)
	L.elem[j-1]=L.elem[j];
	--L.length;
	return OK;
}

int Locate(List L,double price1 )
{//输入价格,返回序号 
	for(int i=0;i<L.length;i++)
	if(L.elem[i].price==price1)
	return i+1;
	return ERROR;
}

int GetBook(List L,int i,Book &e)
{//根据序号，查找对应的书 
	if(i<1||i>L.length) return ERROR;
	e=L.elem[i-1];
	return OK;	
}

int Length(List L)
{
	return L.length;
 } 

int main()
{
	List L;
	double price1;
	int i,choose,n,flag;
	Book e;
	string head_1, head_2, head_3;
	cout << "1. 建立\n";
	cout << "2. 输入\n";
	cout << "3. 取值\n";
	cout << "4. 查找\n";
	cout << "5. 插入\n";
	cout << "6. 删除\n";
	cout << "7. 输出\n";
	cout << "0. 退出\n\n";
	choose=-1;
	while(choose!=0)
	{
		cout<<"请选择操作：" ;
		cin>>choose;
		switch(choose)
		{
			case 1:
				if(InitList(L))
					cout<<"创建顺序表成功！\n\n";
				else 
					cout<<"创建顺序表失败！\n\n";
					 break;
			case 2:{//case后面加{}，因为i的的使用包含整个switch代码块
			//在case后面变量的代码用大括号括起来，构成代码块，超出该代码块后，该变量失效； 
			//i就是只属于case2里面的变量。 
				L.elem=new Book[MAXSIZE];
				if(!L.elem) exit(OVERFLOW);
				L.length=0;
				i=0;
				fstream file;
				file.open("book.txt");
				if(!file)
				{
					cout<<"未找到文件！\n"; 
					exit(OVERFLOW);
				}
				file>>head_1>> head_2>>head_3;
				while(!file.eof())
				{
					file>>L.elem[i].id>>L.elem[i].name>>L.elem[i].price;
					i++;
				}
				cout << "输入 book.txt 信息完毕\n\n";
		     	L.length = i;
			    file.close();}
			    break;
			case 3:
				cout<<"请输入要取的书的位置：";
				cin>>i;
				flag=GetBook(L,i,e);
				if(flag!=0)
				{
					cout<<"查找成功！"<<endl;
					cout<<"第"<<i<<"本书为："<<e.id<<" "<<e.name<<" "<<e.price<<endl;
				}
				else
				cout<<"查找失败！\n" ;
				break;
			case 4:
				cout<<"请输入要查找书的价格：";
				cin>>price1;
				flag=Locate(L,price1);
				if(flag!=0)
				{
					cout<<"查找成功！"<<endl;
					cout<<"这钟价格的书对应的位置为：第 "<<flag<<" 本"<<endl; 
				}
				else
					cout<<"未找到这种价格的书！\n";
				break;
			case 5:
				cout<<"请输入要插入书的位置：";
				cin>>i;
				cout<<"请输入插入的位置和书本信息，包括：编号 书名 价格（用空格隔开）:";
				cin>>e.id>>e.name>>e.price ;				
				if(Insert(L,i,e))
					cout<<"插入成功！\n\n";
				else
					cout<<"插入失败！\n\n";
				break;
			case 6:
				cout<<"请输入要删除书的位置：";
				cin>>i;				
				if(Delete(L, i))
					cout<<"删除成功！\n\n";
				else
					cout<<"删除失败！\n\n";
				break;
			case 7:
				cout<<"当前图书馆系统为：";
				cout << "当前图书系统信息（顺序表）读出:\n";
			for (i = 0; i < L.length; i++)
				cout << left << setw(15) << L.elem[i].id << "\t" << left
						<< setw(50) << L.elem[i].name << "\t" << left
						<< setw(5) << L.elem[i].price << endl;
			cout << endl;
			break;	
			case 8:
				cout<<"当前图书馆藏书为：";
				cout<<Length(L)<<'\n';	
			break;		
		}
	}
	return 0;
	
 } 


